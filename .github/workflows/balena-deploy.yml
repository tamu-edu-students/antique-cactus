name: Deploy to balenaCloud

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-24.04-arm

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get latest Balena CLI version
        id: get_version
        run: |
          latest_release=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/balena-io/balena-cli/releases/latest)
          tag_name=$(echo "$latest_release" | jq -r .tag_name)
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT
          echo "Using Balena CLI $tag_name"

      - name: Download and unzip Balena CLI
        run: |
          tag_name=${{ steps.get_version.outputs.tag_name }}
          tag_name_lower=$(echo "$tag_name" | tr '[:upper:]' '[:lower:]')
          url="https://github.com/balena-io/balena-cli/releases/download/$tag_name_lower/balena-cli-$tag_name_lower-linux-arm64-standalone.zip"

          wget "$url" -O balena-cli.zip
          unzip balena-cli.zip -d .
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to balenaCloud
        run: |
          ./balena-cli/balena login --token "${{ secrets.BALENA_TOKEN }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get fleet ID
        id: get_fleet_id
        run: |
          FLEETS=$(./balena-cli/balena fleet list -j)
          FLEET_ID=$(echo $FLEETS | jq -r --arg REPO_NAME "antique-cactus" '.[] | select(.app_name == $REPO_NAME) | .id')
          echo "fleet_id=$FLEET_ID" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Authenticate with GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Container
        id: build
        run: |
          repo_name=$(basename "${GITHUB_REPOSITORY}")
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT
          echo "Using fleet $repo_name"
          ./balena-cli/balena build --fleet "$repo_name"
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: Push updated cache to GitHub Container Registry
        run: |
          docker tag balena-cache:latest ghcr.io/${{ github.repository }}/balena-cache:latest
          docker push ghcr.io/${{ github.repository }}/balena-cache:latest

      - name: Deploy to balenaCloud
        id: deploy
        run: |
          repo_name=${{ steps.build.outputs.repo_name }}
          ./balena-cli/balena deploy "$repo_name" | tee build_output.txt
          release_hash=$(grep -oP '(?<=\[Success\] Release: )\w+' build_output.txt)
          echo "release_hash=$release_hash" >> $GITHUB_OUTPUT
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: Output deployment details
        run: |
          RELEASES=$(./balena-cli/balena release list ${{ steps.build.outputs.repo_name }} --json)
          RELEASE_ID=$(echo $RELEASES | jq -r --arg COMMIT "${{ steps.deploy.outputs.release_hash }}" '.[] | select(.commit == $COMMIT) | .id')
          echo "# Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "[balenaCloud Dashboard Release](https://dashboard.balena-cloud.com/fleets/${{ steps.get_fleet_id.outputs.fleet_id }}/releases/$RELEASE_ID)" >> $GITHUB_STEP_SUMMARY
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
